[{"authors":["admin"],"categories":null,"content":"I am a Senior Software Engineer at Consolidated Trading, where I work on high-frequency-trading core infrastructure and research. Here, my work so far has spanned low-latency systems, novel programming languages, applied machine learning, and fast kernel-bypass network stacks. I work remotely and live in the lovely finger lakes region in upstate NY. My wife is a yoga teacher, and we have an adorable chocolate labrador named Zazu.\nI was on the PLDI 2022 Programm Committee.\nIn my previous job, I was a Principal Scientist at GrammaTech, Inc, where I led the research area Big Code, which intersects static program analysis with statistical and machine learning. At GrammaTech, I worked on several federally-funded cutting-edge research projects, some of which have been transitioned into products. Below are a selected few:\n A tool to identify embedded library components in binaries (i.e., binary software composition analysis to produce software bill of materials). Additionally, any n-day vulnerabilities in the identified components are reported. This tool uses a novel combination of light-weight program analysis and machine learning. I started this project as a Principal Investigator of a DARPA funded Small Business Innovation Research grant and a DoD CIO\u0026rsquo;s office funded Rapid Innovation Fund. This tool is now available as a commercial product. Static techniques to identify swapped argument errors at callsites using the natural language information available in program code. Our published research on this work won the IEEE TCSE Distinguished Paper Award in 2020. A tool to inject bugs into programs so that we can systematically evaluate static bug-finding tools. Our published research on this work won the IEEE TCSE Distinguished Paper Award in 2019. Using statistical and machine learning techniques to enhance the bug-finding capabilities of various static analysis tools across multiple programming languages (see here for a brief writeup). We have transitioned some of this work into the CodeSonar static analysis tool (see here).  I have had the good fortune of working with several amazing interns over the past few years: Lawton Nichols, Kevin Leach, Prashast Srivastava, Sushant Dinesh, Charlie Murphy, Colin Unger, Avi Saven.\nPreviously, I was a graduate researcher at the Programming Languages Lab, University of California Santa Barbara. My PhD advisor was Ben Hardekopf. During the summers of 2011 and 2012, I was a research intern at Mozilla Research, working with Dave Herman. I worked for a couple of years at National Instruments R\u0026amp;D, Bangalore, right after my undergrad (and developed this LabVIEW feature).\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://vineethk.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a Senior Software Engineer at Consolidated Trading, where I work on high-frequency-trading core infrastructure and research. Here, my work so far has spanned low-latency systems, novel programming languages, applied machine learning, and fast kernel-bypass network stacks. I work remotely and live in the lovely finger lakes region in upstate NY. My wife is a yoga teacher, and we have an adorable chocolate labrador named Zazu.\nI was on the PLDI 2022 Programm Committee.","tags":null,"title":"Vineeth Kashyap","type":"authors"},{"authors":[],"categories":[],"content":"I have really liked using contracts in conjunction with property-based testing during development, so this blog post is a whirlwind tour of these technologies as they apply to Python. In this blog post, I will cover:\n How to perform property-based testing in Python with hypothesis? How to mix it with contract-driven development for Python? How to do the above more efficiently?  Property-based Testing Property-based testing allows programmers to express tests as high-level properties they expect to hold when exercising some code of interest. The intent is to then test the code with automatically and randomly-constructed inputs and check whether the expressed properties hold. A high-level property is a (possibly partial) specification.\nThis ECOOP 2020 paper on the internals of hypothesis\u0026rsquo; test case reduction is very interesting.\nWriting some code:\nfrom heapq import heappush, heappushpop from dpcontracts import require, ensure from hypothesis import given, assume, settings, HealthCheck, Verbosity from hypothesis.extra.dpcontracts import fulfill import hypothesis.strategies as st from hypothesis.strategies import composite from typing import List   @require(\u0026#34;`k` is non-negative\u0026#34;, lambda args: args.k \u0026gt; 0) @require(\u0026#34;`k` is less than length of `nums`\u0026#34;, lambda args: args.k \u0026lt;= len(args.nums)) @ensure(\u0026#34;there are atmost `k` elements\u0026#34;, lambda args, result: len(result) \u0026lt;= args.k) @ensure(  \u0026#34;largest number is returned\u0026#34;, lambda args, result: max(result) == max(args.nums) ) @ensure(  \u0026#34;`result` is the `k` largest\u0026#34;,  lambda args, result: sorted(args.nums, reverse=True)[: args.k]  == sorted(result, reverse=True), ) def find_k_largest_numbers(nums: List[int], k: int) -\u0026gt; List[int]:  result = []  for n in nums:  if len(result) == k:  if result[0] \u0026lt; n:  heappushpop(result, n)  else:  heappush(result, n)  return result   # k \u0026gt; 0 # k \u0026lt; len(num) @composite def list_and_k(draw):  l = draw(st.lists(st.integers(), min_size=1))  k = draw(st.integers(min_value=1, max_value=len(l)))  return (l, k)   # @given(list_and_k()) # @settings( # # suppress_health_check=[HealthCheck.filter_too_much], # max_examples=1000 # # verbosity=Verbosity.verbose, # ) # def test_with_contracts(value): # nums, k = value # fulfill(find_k_largest_numbers)(nums, k)   @given(l=st.lists(st.integers()), i=st.integers()) @settings(  suppress_health_check=[HealthCheck.filter_too_much, HealthCheck.too_slow],  max_examples=1000, ) def test_with_contracts_slow(l, i):  fulfill(find_k_largest_numbers)(l, i) ","date":1612457756,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612457756,"objectID":"62b7134a341230e9fe5a2d674d085b6c","permalink":"https://vineethk.github.io/post/contracts-and-property-based-testing-for-python/","publishdate":"2021-02-04T11:55:56-05:00","relpermalink":"/post/contracts-and-property-based-testing-for-python/","section":"post","summary":"I have really liked using contracts in conjunction with property-based testing during development, so this blog post is a whirlwind tour of these technologies as they apply to Python. In this blog post, I will cover:\n How to perform property-based testing in Python with hypothesis? How to mix it with contract-driven development for Python? How to do the above more efficiently?  Property-based Testing Property-based testing allows programmers to express tests as high-level properties they expect to hold when exercising some code of interest.","tags":[],"title":"Contracts and Property-Based Testing for Python","type":"post"},{"authors":["Vineeth Kashyap","Roger Scott","Joseph Ranieri","David Melsi","Lucja Kot"],"categories":[],"content":"","date":1605654559,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605654559,"objectID":"1b48900c571338d015849c0ca48eff33","permalink":"https://vineethk.github.io/publication/api-analytics/","publishdate":"2020-10-04T19:09:19-04:00","relpermalink":"/publication/api-analytics/","section":"publication","summary":"","tags":[],"title":"API Analytics for Curating Static Analysis Rules","type":"publication"},{"authors":[],"categories":null,"content":"","date":1605571200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605571200,"objectID":"575352e3eaa4cb15e81ea79065c422da","permalink":"https://vineethk.github.io/talk/api-analytics/","publishdate":"2020-10-06T16:15:33-04:00","relpermalink":"/talk/api-analytics/","section":"talk","summary":"","tags":[],"title":"API Analytics for Curating Static Analysis Rules","type":"talk"},{"authors":["Roger Scott","Joseph Ranieri","Lucja Kot","Vineeth Kashyap"],"categories":[],"content":"","date":1601334084,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601334084,"objectID":"90b7161b7d2b5d53f549280320528b39","permalink":"https://vineethk.github.io/publication/out-of-sight-out-of-place/","publishdate":"2020-10-04T19:01:24-04:00","relpermalink":"/publication/out-of-sight-out-of-place/","section":"publication","summary":"Distinguished Paper Award","tags":[],"title":"Out of Sight, Out of Place: Detecting and Assessing Swapped Arguments","type":"publication"},{"authors":[],"categories":null,"content":"","date":1601251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601251200,"objectID":"93d1e3b7c46b054cb468bd4dafc90643","permalink":"https://vineethk.github.io/talk/swapd/","publishdate":"2020-10-06T16:10:57-04:00","relpermalink":"/talk/swapd/","section":"talk","summary":"","tags":[],"title":"Out of Sight, Out of Place: Detecting and Assessing Swapped Arguments","type":"talk"},{"authors":["Vineeth Kashyap","Jason Ruchti","Lucja Kot","Emma Turetsky","Rebecca Swords","Shih An Pan","Julien Henry","David Melski","Eric Schulte"],"categories":[],"content":"","date":1569888000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569888000,"objectID":"9387ee15d0d94c526390a54669bf88cf","permalink":"https://vineethk.github.io/publication/bug-injector/","publishdate":"2019-07-01T00:00:00Z","relpermalink":"/publication/bug-injector/","section":"publication","summary":"Distinguished Paper Award","tags":[],"title":"Automated Customized Bug-Benchmark Generation","type":"publication"},{"authors":[],"categories":null,"content":"","date":1565136000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565136000,"objectID":"8a85608d863062f3b9fc5e6b83b45713","permalink":"https://vineethk.github.io/talk/apiad/","publishdate":"2019-07-05T00:00:00Z","relpermalink":"/talk/apiad/","section":"talk","summary":"","tags":[],"title":"STAMP: Using Big Code to Learn Static Analysis Rules for Library APIs","type":"talk"},{"authors":[],"categories":null,"content":"","date":1561248000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561248000,"objectID":"d8ffbbef6e9fa8a6faf578bd8d6433d1","permalink":"https://vineethk.github.io/talk/ddisasm/","publishdate":"2019-06-23T00:00:00Z","relpermalink":"/talk/ddisasm/","section":"talk","summary":"","tags":[],"title":"Fast and Precise Disassembly Using Datalog","type":"talk"},{"authors":[],"categories":null,"content":"","date":1560902400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560902400,"objectID":"56755aa89df045466a2db584d72d5477","permalink":"https://vineethk.github.io/talk/js-smart/","publishdate":"2019-06-19T00:00:00Z","relpermalink":"/talk/js-smart/","section":"talk","summary":"","tags":[],"title":"JS Smart: Checking Library API Usage in JavaScript Programs","type":"talk"},{"authors":["Vineeth Kashyap","David Bingham Brown","Ben Liblit","David Melski","Thomas Reps"],"categories":[],"content":"","date":1496880000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496880000,"objectID":"afe7bf5c9f6e5b31d347c5fa63b3f9f9","permalink":"https://vineethk.github.io/publication/source-forager/","publishdate":"2021-01-21T16:06:11-05:00","relpermalink":"/publication/source-forager/","section":"publication","summary":"","tags":[],"title":"Source Forager: A Search Engine for Similar Source Code","type":"publication"},{"authors":["Vineeth Kashyap","Rebecca Swords","Eric Schulte","David Melski"],"categories":[],"content":"","date":1496275200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496275200,"objectID":"cbdf07e908a466d075cad74665ca6909","permalink":"https://vineethk.github.io/publication/musynth/","publishdate":"2017-06-01T00:00:00Z","relpermalink":"/publication/musynth/","section":"publication","summary":"","tags":[],"title":"MuSynth: Program Synthesis via Code Reuse and Code Manipulation","type":"publication"},{"authors":["Kyle Dewey","Vineeth Kashyap","Ben Hardekopf"],"categories":[],"content":"","date":1422748800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1422748800,"objectID":"bddb345af6f2de39c01ef52d1776fbd2","permalink":"https://vineethk.github.io/publication/parallel-ai-for-javascript/","publishdate":"2015-02-01T00:00:00Z","relpermalink":"/publication/parallel-ai-for-javascript/","section":"publication","summary":"","tags":[],"title":"A Parallel Abstract Interpreter for JavaScript","type":"publication"},{"authors":["Vineeth Kashyap","Kyle Dewey","Ethan A Kuefner","John Wagner","Kevin Gibbons","John Sarracino","Ben Wiedermann","Ben Hardekopf"],"categories":[],"content":"","date":1415664000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1415664000,"objectID":"8ad780654b3c6e53ff7608feb563b180","permalink":"https://vineethk.github.io/publication/a-static-analysis-platform-for-javascript/","publishdate":"2019-07-14T15:13:20-04:00","relpermalink":"/publication/a-static-analysis-platform-for-javascript/","section":"publication","summary":"","tags":[],"title":"JSAI: A static analysis platform for JavaScript","type":"publication"},{"authors":["Xun Li","Vineeth Kashyap","Jason Oberg","Mohit Tiwari","Vasanth Ram Rajarathinam","Ryan Kastner","Tim Sherwood","Ben Hardekopf","Frederic T. Chong"],"categories":[],"content":"","date":1393632000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1393632000,"objectID":"049f37a6a7a7d3ca7c8da00659bece22","permalink":"https://vineethk.github.io/publication/sapper-asplos/","publishdate":"2014-03-01T00:00:00Z","relpermalink":"/publication/sapper-asplos/","section":"publication","summary":"Honorable mention for IEEE Micro Top Picks","tags":[],"title":"Sapper: A Language for Hardware-Level Security Policy Enforcement","type":"publication"},{"authors":["Vineeth Kashyap","Ben Hardekopf"],"categories":[],"content":"","date":1391212800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1391212800,"objectID":"8009c3ab9b88d8300fc5e3b2f7d464b0","permalink":"https://vineethk.github.io/publication/browser-addons/","publishdate":"2014-02-01T00:00:00Z","relpermalink":"/publication/browser-addons/","section":"publication","summary":"","tags":[],"title":"Security Signature Inference for JavaScript-based Browser Addons","type":"publication"},{"authors":["Ben Hardekopf","Ben Wiedermann","Berkeley Churchill","Vineeth Kashyap"],"categories":[],"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"151c2e086ee1ce3d6be4e798e3a397e7","permalink":"https://vineethk.github.io/publication/widening-for-control-flow/","publishdate":"2014-01-01T00:00:00Z","relpermalink":"/publication/widening-for-control-flow/","section":"publication","summary":"","tags":[],"title":"Widening for Control Flow","type":"publication"},{"authors":["Xun Li","Vineeth Kashyap","Jason K. Oberg","Mohit Tiwari","Vasanth Ram Rajarathinam","Ryan Kastner","Timothy Sherwood","Ben Hardekopf","Frederic T. Chong"],"categories":[],"content":"","date":1370044800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1370044800,"objectID":"f1cda45aadf099c7c877ecaa5213b95b","permalink":"https://vineethk.github.io/publication/sapper-plas/","publishdate":"2013-06-01T00:00:00Z","relpermalink":"/publication/sapper-plas/","section":"publication","summary":"","tags":[],"title":"Sapper: a Language for Provable Hardware Policy Enforcement","type":"publication"},{"authors":["Vineeth Kashyap","John Sarracino","John Wagner","Ben Wiedermann","Ben Hardekopf"],"categories":[],"content":"","date":1370044800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1370044800,"objectID":"6d663c9f9fc32bf1bbfd5ec264e90c50","permalink":"https://vineethk.github.io/publication/type-refinement/","publishdate":"2019-07-27T16:50:36-04:00","relpermalink":"/publication/type-refinement/","section":"publication","summary":"","tags":[],"title":"Type Refinement for Static Analysis of JavaScript","type":"publication"},{"authors":["Xun Li","Mohit Tiwari","Jason K. Oberg","Vineeth Kashyap","Fred Chong","Tim Sherwood","Ben Hardekopf"],"categories":[],"content":"","date":1306886400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1306886400,"objectID":"21910ae769dedfe631bc8e7c5b8af9c1","permalink":"https://vineethk.github.io/publication/caisson/","publishdate":"2011-06-01T00:00:00Z","relpermalink":"/publication/caisson/","section":"publication","summary":"","tags":[],"title":"Caisson: a Hardware Description Language for Secure Information Flow","type":"publication"},{"authors":["Vineeth Kashyap","Ben Wiedermann","Ben Hardekopf"],"categories":[],"content":"","date":1304208000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1304208000,"objectID":"2d2bf12c7f45d5093d7a628d41d2fe47","permalink":"https://vineethk.github.io/publication/timing-and-termination/","publishdate":"2011-05-01T00:00:00Z","relpermalink":"/publication/timing-and-termination/","section":"publication","summary":"","tags":[],"title":"Timing- and Termination-Sensitive Secure Information Flow: Exploring a New Approach","type":"publication"}]